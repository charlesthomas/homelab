---
apiVersion: v1
kind: Namespace
metadata:
  name: vault-warden
  labels:
    app: vault-warden
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-warden
  namespace: vault-warden
  labels:
    app: vault-warden
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-warden
  namespace: vault-warden
  labels:
    app: vault-warden
data:
  DOMAIN: "https://vault.crt.house"
  WEBSOCKET_ENABLED: "true"
  WEBSOCKET_ADDRESS: "0.0.0.0"
  WEBSOCKET_PORT: "3012"
  DATA_FOLDER: "/data"
  ROCKET_ADDRESS: "0.0.0.0"
  ROCKET_PORT: "8080"
  ROCKET_WORKERS: "10"
  SHOW_PASSWORD_HINT: "false"
  SIGNUPS_ALLOWED: "false"
  INVITATIONS_ALLOWED: "false"
  SIGNUPS_VERIFY: "false"
  WEB_VAULT_ENABLED: "true"
  LOG_LEVEL: "debug"
  DB_CONNECTION_RETRIES: "15"
  DATABASE_MAX_CONNS: "10"
  INVITATION_ORG_NAME: "Vaultwarden"
  ICON_BLACKLIST_NON_GLOBAL_IPS: "true"
  IP_HEADER: "X-Real-IP"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-warden
  namespace: vault-warden
  labels:
    app: vault-warden
rules:
  - apiGroups: ["extensions", "apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["create","delete","get","list","patch","update","watch"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create","delete","get","list","patch","update","watch"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get","list","watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-warden
  namespace: vault-warden
  labels:
    app: vault-warden
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault-warden
subjects:
- kind: ServiceAccount
  name: vault-warden
---
apiVersion: v1
kind: Service
metadata:
  name: vault-warden
  namespace: vault-warden
  labels:
    app: vault-warden
spec:
  type: "ClusterIP"
  selector:
    app.kubernetes.io/component: vault-warden
  ports:
    - name: "http"
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: "websocket"
      port: 3012
      protocol: TCP
      targetPort: 3012
  ipFamilyPolicy: SingleStack
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vault-warden
  namespace: vault-warden
  labels:
    app: vault-warden
  annotations:
    ingress.kubernetes.io/rewrite-target: /
    ingress.kubernetes.io/ssl-redirect: "true"
    external-dns.alpha.kubernetes.io/hostname: vault.crt.house
    external-dns.alpha.kubernetes.io/target: crt.house
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "Request-Id: $req_id";
    nginx.ingress.kubernetes.io/connection-proxy-header: "keep-alive"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/limit-connections: "25"
    nginx.ingress.kubernetes.io/limit-rps: "15"
    nginx.ingress.kubernetes.io/proxy-body-size: 1024m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
spec:
  ingressClassName: "crt-house-external"
  tls:
    - hosts:
        - "vault.crt.house"
  rules:
    - host: "vault.crt.house"
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: vault-warden
              port:
                name: "http"
        - path: /notifications/hub
          pathType: Exact
          backend:
            service:
              name: vault-warden
              port:
                name: "websocket"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-warden
  namespace: vault-warden
  labels:
    app: vault-warden
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 15Gi
  storageClassName: nfs-critical
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault-warden
  namespace: vault-warden
  labels:
    app: vault-warden
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: vault-warden
      app.kubernetes.io/name: vault-warden
  template:
    metadata:
      labels:
        app: vault-warden
        app.kubernetes.io/component: vault-warden
        app.kubernetes.io/name: vault-warden
    spec:
      volumes:
        - name: vault-warden-data
          persistentVolumeClaim:
            claimName: vault-warden
      containers:
        - image: docker.io/vaultwarden/server:1.30.1-alpine
          imagePullPolicy: IfNotPresent
          name: vault-warden
          envFrom:
            - configMapRef:
                name: vault-warden
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 3012
              name: websocket
              protocol: TCP
          volumeMounts:
            - name: vault-warden-data
              mountPath: /data
          livenessProbe:
            httpGet:
              path: /alive
              port: http
            initialDelaySeconds: 200
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /alive
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
      serviceAccountName: vault-warden
